"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const PARAMS_PREFIX = 'params_';
const ROUTE_PREFIX = 'route_';
const ACTION_TYPES = {
    HEAD: 'head',
    GET: 'get',
    POST: 'post',
    PUT: 'put',
    DELETE: 'delete',
    OPTIONS: 'options',
    ALL: 'all'
};
function Controller(path, ...middlewares) {
    return function (target) {
        const proto = target.prototype;
        const protos = Object.getOwnPropertyNames(proto);
        target.$path = path;
        proto.$routes = [];
        for (const prop of protos) {
            if (prop.indexOf(ROUTE_PREFIX) === 0) {
                const route = proto[prop];
                proto.$routes.push({
                    method: route.method,
                    url: path + route.path,
                    middleware: middlewares.concat(route.middleware),
                    fnName: prop.substring(ROUTE_PREFIX.length)
                });
            }
        }
        proto.$params = {};
        for (const prop of protos) {
            if (prop.indexOf(PARAMS_PREFIX) === 0) {
                const { index, name, fn } = proto[prop];
                if (!proto.$params[name])
                    proto.$params[name] = [];
                proto.$params[name][index] = fn;
            }
        }
    };
}
exports.Controller = Controller;
;
function Route(method, path, ...middleware) {
    return (target, propertyKey, descriptor) => {
        target[`${ROUTE_PREFIX}${propertyKey}`] = { method, path: path || '', middleware };
    };
}
exports.Route = Route;
;
function Get(path, ...middlewares) {
    return Route(ACTION_TYPES.GET, path, ...middlewares);
}
exports.Get = Get;
;
function Post(path, ...middlewares) {
    return Route(ACTION_TYPES.POST, path, ...middlewares);
}
exports.Post = Post;
;
function Put(path, ...middlewares) {
    return Route(ACTION_TYPES.PUT, path, ...middlewares);
}
exports.Put = Put;
;
function Delete(path, ...middlewares) {
    return Route(ACTION_TYPES.DELETE, path, ...middlewares);
}
exports.Delete = Delete;
;
function Body() {
    return function (target, propertyKey, index) {
        target[`${PARAMS_PREFIX}${propertyKey}`] = {
            index,
            name: propertyKey,
            fn: (ctx) => {
                return ctx.request.fields;
            }
        };
    };
}
exports.Body = Body;
function Inject(fn) {
    return function (target, propertyKey, index) {
        target[`${PARAMS_PREFIX}${index}_${propertyKey}`] = {
            index,
            name: propertyKey,
            fn
        };
    };
}
exports.Inject = Inject;
function Ctx() {
    return Inject((ctx) => ctx);
}
exports.Ctx = Ctx;
function Req() {
    return Inject((ctx) => ctx.req);
}
exports.Req = Req;
function File() {
    return Inject((ctx) => {
        if (ctx.request.files.length)
            return ctx.request.files[0];
        return ctx.request.files;
    });
}
exports.File = File;
function Files() {
    return Inject((ctx) => ctx.request.files);
}
exports.Files = Files;
function QueryParam(prop) {
    return Inject((ctx) => {
        if (!prop)
            return ctx.query;
        return ctx.query[prop];
    });
}
exports.QueryParam = QueryParam;
function QueryParams() {
    return QueryParam();
}
exports.QueryParams = QueryParams;
function Param(prop) {
    return Inject((ctx) => {
        if (!prop)
            return ctx.params;
        return ctx.params[prop];
    });
}
exports.Param = Param;
function Params() {
    return Param();
}
exports.Params = Params;
function getArguments(ctrl, fnName, ctx, next) {
    let args = [ctx, next];
    const params = ctrl.prototype.$params[fnName];
    if (params) {
        args = [];
        for (const fn of params) {
            let result;
            if (fn !== undefined)
                result = fn(ctx);
            args.push(result);
        }
    }
    return args;
}
function bindRoutes(routerRoutes, controllers) {
    for (const ctrl of controllers) {
        const routes = ctrl.prototype.$routes;
        for (const { method, url, middleware, fnName } of routes) {
            routerRoutes[method](url, ...middleware, function (ctx, next) {
                return __awaiter(this, void 0, void 0, function* () {
                    const inst = new ctrl();
                    const args = getArguments(ctrl, fnName, ctx, next);
                    const result = inst[fnName](...args);
                    if (result)
                        ctx.body = yield result;
                    return result;
                });
            });
        }
    }
    return routerRoutes;
}
exports.bindRoutes = bindRoutes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxNQUFNLGFBQWEsR0FBVyxTQUFTLENBQUM7QUFDeEMsTUFBTSxZQUFZLEdBQVcsUUFBUSxDQUFDO0FBQ3RDLE1BQU0sWUFBWSxHQUFHO0lBQ25CLElBQUksRUFBRSxNQUFNO0lBQ1osR0FBRyxFQUFFLEtBQUs7SUFDVixJQUFJLEVBQUUsTUFBTTtJQUNaLEdBQUcsRUFBRSxLQUFLO0lBQ1YsTUFBTSxFQUFFLFFBQVE7SUFDaEIsT0FBTyxFQUFFLFNBQVM7SUFDbEIsR0FBRyxFQUFFLEtBQUs7Q0FDWCxDQUFDO0FBRUYsb0JBQTJCLElBQWEsRUFBRSxHQUFHLFdBQXVCO0lBQ2xFLE1BQU0sQ0FBQyxVQUFTLE1BQU07UUFDcEIsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUMvQixNQUFNLE1BQU0sR0FBSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEQsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFFcEIsS0FBSyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbkIsR0FBRyxDQUFBLENBQUMsTUFBTSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN6QixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BDLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDMUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7b0JBQ2pCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtvQkFDcEIsR0FBRyxFQUFFLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSTtvQkFDdEIsVUFBVSxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxD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LEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN4RCxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsVUFBVSxFQUFFLFVBQWUsR0FBRyxFQUFFLElBQUk7O29CQUMvRCxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO29CQUN4QixNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQ25ELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO29CQUNyQyxFQUFFLENBQUEsQ0FBQyxNQUFNLENBQUM7d0JBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQztvQkFDbkMsTUFBTSxDQUFDLE1BQU0sQ0FBQztnQkFDaEIsQ0FBQzthQUFBLENBQUMsQ0FBQztRQUNMLENBQUM7SUFDSCxDQUFDO0lBQ0QsTUFBTSxDQUFDLFlBQVksQ0FBQztBQUN0QixDQUFDO0FBZEQsZ0NBY0MiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQQVJBTVNfUFJFRklYOiBzdHJpbmcgPSAncGFyYW1zXyc7XG5jb25zdCBST1VURV9QUkVGSVg6IHN0cmluZyA9ICdyb3V0ZV8nO1xuY29uc3QgQUNUSU9OX1RZUEVTID0ge1xuICBIRUFEOiAnaGVhZCcsXG4gIEdFVDogJ2dldCcsXG4gIFBPU1Q6ICdwb3N0JyxcbiAgUFVUOiAncHV0JyxcbiAgREVMRVRFOiAnZGVsZXRlJyxcbiAgT1BUSU9OUzogJ29wdGlvbnMnLFxuICBBTEw6ICdhbGwnXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gQ29udHJvbGxlcihwYXRoPzogc3RyaW5nLCAuLi5taWRkbGV3YXJlczogRnVuY3Rpb25bXSkge1xuICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgY29uc3QgcHJvdG8gPSB0YXJnZXQucHJvdG90eXBlO1xuICAgIGNvbnN0IHByb3RvcyA9ICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm90byk7XG4gICAgdGFyZ2V0LiRwYXRoID0gcGF0aDtcblxuICAgIHByb3RvLiRyb3V0ZXMgPSBbXTtcbiAgICBmb3IoY29uc3QgcHJvcCBvZiBwcm90b3MpIHtcbiAgICAgIGlmKHByb3AuaW5kZXhPZihST1VURV9QUkVGSVgpID09PSAwKSB7XG4gICAgICAgIGNvbnN0IHJvdXRlID0gcHJvdG9bcHJvcF07XG4gICAgICAgIHByb3RvLiRyb3V0ZXMucHVzaCh7IFxuICAgICAgICAgIG1ldGhvZDogcm91dGUubWV0aG9kLCBcbiAgICAgICAgICB1cmw6IHBhdGggKyByb3V0ZS5wYXRoLCBcbiAgICAgICAgICBtaWRkbGV3YXJlOiBtaWRkbGV3YXJlcy5jb25jYXQocm91dGUubWlkZGxld2FyZSksXG4gICAgICAgICAgZm5OYW1lOiBwcm9wLnN1YnN0cmluZyhST1VURV9QUkVGSVgubGVuZ3RoKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90by4kcGFyYW1zID0ge307XG4gICAgZm9yKGNvbnN0IHByb3Agb2YgcHJvdG9zKSB7XG4gICAgICBpZihwcm9wLmluZGV4T2YoUEFSQU1TX1BSRUZJWCkgPT09IDApIHtcbiAgICAgICAgY29uc3QgeyBpbmRleCwgbmFtZSwgZm4gfSA9IHByb3RvW3Byb3BdO1xuICAgICAgICBpZighcHJvdG8uJHBhcmFtc1tuYW1lXSkgcHJvdG8uJHBhcmFtc1tuYW1lXSA9IFtdO1xuICAgICAgICBwcm90by4kcGFyYW1zW25hbWVdW2luZGV4XSA9IGZuO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBSb3V0ZShtZXRob2Q6IHN0cmluZywgcGF0aD86IHN0cmluZywgLi4ubWlkZGxld2FyZTogRnVuY3Rpb25bXSkge1xuICByZXR1cm4gKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjxhbnk+KSA9PiB7XG4gICAgdGFyZ2V0W2Ake1JPVVRFX1BSRUZJWH0ke3Byb3BlcnR5S2V5fWBdID0ge21ldGhvZCwgcGF0aDogcGF0aCB8fCAnJywgbWlkZGxld2FyZX07XG4gIH07XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gR2V0KHBhdGg/OiBzdHJpbmcsIC4uLm1pZGRsZXdhcmVzOiBGdW5jdGlvbltdKSB7XG4gIHJldHVybiBSb3V0ZShBQ1RJT05fVFlQRVMuR0VULCBwYXRoLCAuLi5taWRkbGV3YXJlcyk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gUG9zdChwYXRoPzogc3RyaW5nLCAuLi5taWRkbGV3YXJlczogRnVuY3Rpb25bXSkge1xuICByZXR1cm4gUm91dGUoQUNUSU9OX1RZUEVTLlBPU1QsIHBhdGgsIC4uLm1pZGRsZXdhcmVzKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBQdXQocGF0aD86IHN0cmluZywgLi4ubWlkZGxld2FyZXM6IEZ1bmN0aW9uW10pIHtcbiAgcmV0dXJuIFJvdXRlKEFDVElPTl9UWVBFUy5QVVQsIHBhdGgsIC4uLm1pZGRsZXdhcmVzKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBEZWxldGUocGF0aD86IHN0cmluZywgLi4ubWlkZGxld2FyZXM6IEZ1bmN0aW9uW10pIHtcbiAgcmV0dXJuIFJvdXRlKEFDVElPTl9UWVBFUy5ERUxFVEUsIHBhdGgsIC4uLm1pZGRsZXdhcmVzKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBCb2R5KCkge1xuICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcsIGluZGV4OiBudW1iZXIpIHtcbiAgICB0YXJnZXRbYCR7UEFSQU1TX1BSRUZJWH0ke3Byb3BlcnR5S2V5fWBdID0ge1xuICAgICAgaW5kZXgsXG4gICAgICBuYW1lOiBwcm9wZXJ0eUtleSxcbiAgICAgIGZuOiAoY3R4KSA9PiB7XG4gICAgICAgIHJldHVybiBjdHgucmVxdWVzdC5maWVsZHM7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEluamVjdChmbikge1xuICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcsIGluZGV4OiBudW1iZXIpIHtcbiAgICB0YXJnZXRbYCR7UEFSQU1TX1BSRUZJWH0ke2luZGV4fV8ke3Byb3BlcnR5S2V5fWBdID0ge1xuICAgICAgaW5kZXgsXG4gICAgICBuYW1lOiBwcm9wZXJ0eUtleSxcbiAgICAgIGZuXG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEN0eCgpIHtcbiAgcmV0dXJuIEluamVjdCgoY3R4KSA9PiBjdHgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVxKCkge1xuICByZXR1cm4gSW5qZWN0KChjdHgpID0+IGN0eC5yZXEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRmlsZSgpIHtcbiAgcmV0dXJuIEluamVjdCgoY3R4KSA9PiB7XG4gICAgaWYoY3R4LnJlcXVlc3QuZmlsZXMubGVuZ3RoKSByZXR1cm4gY3R4LnJlcXVlc3QuZmlsZXNbMF07XG4gICAgcmV0dXJuIGN0eC5yZXF1ZXN0LmZpbGVzO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEZpbGVzKCkge1xuICByZXR1cm4gSW5qZWN0KChjdHgpID0+IGN0eC5yZXF1ZXN0LmZpbGVzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFF1ZXJ5UGFyYW0ocHJvcD8pIHtcbiAgcmV0dXJuIEluamVjdCgoY3R4KSA9PiB7XG4gICAgaWYoIXByb3ApIHJldHVybiBjdHgucXVlcnk7XG4gICAgcmV0dXJuIGN0eC5xdWVyeVtwcm9wXTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBRdWVyeVBhcmFtcygpIHtcbiAgcmV0dXJuIFF1ZXJ5UGFyYW0oKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFBhcmFtKHByb3A/KSB7XG4gIHJldHVybiBJbmplY3QoKGN0eCkgPT4ge1xuICAgIGlmKCFwcm9wKSByZXR1cm4gY3R4LnBhcmFtcztcbiAgICByZXR1cm4gY3R4LnBhcmFtc1twcm9wXTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBQYXJhbXMoKSB7XG4gIHJldHVybiBQYXJhbSgpO1xufVxuXG5mdW5jdGlvbiBnZXRBcmd1bWVudHMoY3RybCwgZm5OYW1lLCBjdHgsIG5leHQpIHtcbiAgbGV0IGFyZ3MgPSBbY3R4LCBuZXh0XTtcbiAgY29uc3QgcGFyYW1zID0gY3RybC5wcm90b3R5cGUuJHBhcmFtc1tmbk5hbWVdO1xuXG4gIGlmKHBhcmFtcykge1xuICAgIGFyZ3MgPSBbXTtcbiAgICBmb3IoY29uc3QgZm4gb2YgcGFyYW1zKSB7XG4gICAgICBsZXQgcmVzdWx0O1xuICAgICAgaWYoZm4gIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gZm4oY3R4KTtcbiAgICAgIGFyZ3MucHVzaChyZXN1bHQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcmdzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmluZFJvdXRlcyhyb3V0ZXJSb3V0ZXMsIGNvbnRyb2xsZXJzKSB7XG4gIGZvcihjb25zdCBjdHJsIG9mIGNvbnRyb2xsZXJzKSB7XG4gICAgY29uc3Qgcm91dGVzID0gY3RybC5wcm90b3R5cGUuJHJvdXRlcztcbiAgICBmb3IoY29uc3QgeyBtZXRob2QsIHVybCwgbWlkZGxld2FyZSwgZm5OYW1lIH0gb2Ygcm91dGVzKSB7XG4gICAgICByb3V0ZXJSb3V0ZXNbbWV0aG9kXSh1cmwsIC4uLm1pZGRsZXdhcmUsIGFzeW5jIGZ1bmN0aW9uKGN0eCwgbmV4dCkge1xuICAgICAgICBjb25zdCBpbnN0ID0gbmV3IGN0cmwoKTtcbiAgICAgICAgY29uc3QgYXJncyA9IGdldEFyZ3VtZW50cyhjdHJsLCBmbk5hbWUsIGN0eCwgbmV4dCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGluc3RbZm5OYW1lXSguLi5hcmdzKTtcbiAgICAgICAgaWYocmVzdWx0KSBjdHguYm9keSA9IGF3YWl0IHJlc3VsdDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcm91dGVyUm91dGVzO1xufVxuIl19